/* tslint:disable */
/* eslint-disable */
/*
Data API

Serves the Clever Data API

The version of the OpenAPI document: 3.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DistrictResponse } from '../models';
// @ts-ignore
import { NotFound } from '../models';
// @ts-ignore
import { ResourcesResponse } from '../models';
// @ts-ignore
import { SchoolsResponse } from '../models';
// @ts-ignore
import { SectionsResponse } from '../models';
// @ts-ignore
import { UserResponse } from '../models';
// @ts-ignore
import { UsersResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the district for a user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistrict: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDistrict', 'id', id)
            const localVarPath = `/users/{id}/district`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{id}/district',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of contact, district admin, staff, student, and/or teacher users
         * @param {number} [limit] 
         * @param {'contact' | 'district_admin' | 'staff' | 'student' | 'teacher'} [role] 
         * @param {string} [startingAfter] 
         * @param {string} [endingBefore] 
         * @param {'' | 'true' | 'false' | 'undefined'} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (limit?: number, role?: 'contact' | 'district_admin' | 'staff' | 'student' | 'teacher', startingAfter?: string, endingBefore?: string, count?: '' | 'true' | 'false' | 'undefined', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", [], configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the contact users for a student user
         * @param {string} id 
         * @param {number} [limit] 
         * @param {string} [startingAfter] 
         * @param {string} [endingBefore] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyContacts: async (id: string, limit?: number, startingAfter?: string, endingBefore?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMyContacts', 'id', id)
            const localVarPath = `/users/{id}/mycontacts`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", [], configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{id}/mycontacts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the resources for a user
         * @param {string} id 
         * @param {number} [limit] 
         * @param {string} [startingAfter] 
         * @param {string} [endingBefore] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResources: async (id: string, limit?: number, startingAfter?: string, endingBefore?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getResources', 'id', id)
            const localVarPath = `/users/{id}/resources`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", [], configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{id}/resources',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the schools for a user
         * @param {string} id 
         * @param {'' | 'true'} [primary] 
         * @param {number} [limit] 
         * @param {string} [startingAfter] 
         * @param {string} [endingBefore] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchools: async (id: string, primary?: '' | 'true', limit?: number, startingAfter?: string, endingBefore?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSchools', 'id', id)
            const localVarPath = `/users/{id}/schools`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", [], configuration)
            if (primary !== undefined) {
                localVarQueryParameter['primary'] = primary;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{id}/schools',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the sections for a user
         * @param {string} id 
         * @param {number} [limit] 
         * @param {string} [startingAfter] 
         * @param {string} [endingBefore] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSections: async (id: string, limit?: number, startingAfter?: string, endingBefore?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSections', 'id', id)
            const localVarPath = `/users/{id}/sections`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", [], configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{id}/sections',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the student users for a teacher or contact user
         * @param {string} id 
         * @param {number} [limit] 
         * @param {string} [startingAfter] 
         * @param {string} [endingBefore] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentUsers: async (id: string, limit?: number, startingAfter?: string, endingBefore?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getStudentUsers', 'id', id)
            const localVarPath = `/users/{id}/mystudents`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", [], configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{id}/mystudents',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the teacher users for a student user
         * @param {string} id 
         * @param {number} [limit] 
         * @param {string} [startingAfter] 
         * @param {string} [endingBefore] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachersForUser: async (id: string, limit?: number, startingAfter?: string, endingBefore?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTeachersForUser', 'id', id)
            const localVarPath = `/users/{id}/myteachers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", [], configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{id}/myteachers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a specific user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserById', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the district for a user
         * @param {UsersApiGetDistrictRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDistrict(requestParameters: UsersApiGetDistrictRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DistrictResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDistrict(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of contact, district admin, staff, student, and/or teacher users
         * @param {UsersApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(requestParameters: UsersApiGetListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(requestParameters.limit, requestParameters.role, requestParameters.startingAfter, requestParameters.endingBefore, requestParameters.count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the contact users for a student user
         * @param {UsersApiGetMyContactsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyContacts(requestParameters: UsersApiGetMyContactsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyContacts(requestParameters.id, requestParameters.limit, requestParameters.startingAfter, requestParameters.endingBefore, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the resources for a user
         * @param {UsersApiGetResourcesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResources(requestParameters: UsersApiGetResourcesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourcesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getResources(requestParameters.id, requestParameters.limit, requestParameters.startingAfter, requestParameters.endingBefore, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the schools for a user
         * @param {UsersApiGetSchoolsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSchools(requestParameters: UsersApiGetSchoolsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchoolsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSchools(requestParameters.id, requestParameters.primary, requestParameters.limit, requestParameters.startingAfter, requestParameters.endingBefore, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the sections for a user
         * @param {UsersApiGetSectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSections(requestParameters: UsersApiGetSectionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SectionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSections(requestParameters.id, requestParameters.limit, requestParameters.startingAfter, requestParameters.endingBefore, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the student users for a teacher or contact user
         * @param {UsersApiGetStudentUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStudentUsers(requestParameters: UsersApiGetStudentUsersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStudentUsers(requestParameters.id, requestParameters.limit, requestParameters.startingAfter, requestParameters.endingBefore, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the teacher users for a student user
         * @param {UsersApiGetTeachersForUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeachersForUser(requestParameters: UsersApiGetTeachersForUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeachersForUser(requestParameters.id, requestParameters.limit, requestParameters.startingAfter, requestParameters.endingBefore, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a specific user
         * @param {UsersApiGetUserByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserById(requestParameters: UsersApiGetUserByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Returns the district for a user
         * @param {UsersApiGetDistrictRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistrict(requestParameters: UsersApiGetDistrictRequest, options?: AxiosRequestConfig): AxiosPromise<DistrictResponse> {
            return localVarFp.getDistrict(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of contact, district admin, staff, student, and/or teacher users
         * @param {UsersApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: UsersApiGetListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<UsersResponse> {
            return localVarFp.getList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the contact users for a student user
         * @param {UsersApiGetMyContactsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyContacts(requestParameters: UsersApiGetMyContactsRequest, options?: AxiosRequestConfig): AxiosPromise<UsersResponse> {
            return localVarFp.getMyContacts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the resources for a user
         * @param {UsersApiGetResourcesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResources(requestParameters: UsersApiGetResourcesRequest, options?: AxiosRequestConfig): AxiosPromise<ResourcesResponse> {
            return localVarFp.getResources(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the schools for a user
         * @param {UsersApiGetSchoolsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchools(requestParameters: UsersApiGetSchoolsRequest, options?: AxiosRequestConfig): AxiosPromise<SchoolsResponse> {
            return localVarFp.getSchools(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the sections for a user
         * @param {UsersApiGetSectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSections(requestParameters: UsersApiGetSectionsRequest, options?: AxiosRequestConfig): AxiosPromise<SectionsResponse> {
            return localVarFp.getSections(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the student users for a teacher or contact user
         * @param {UsersApiGetStudentUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentUsers(requestParameters: UsersApiGetStudentUsersRequest, options?: AxiosRequestConfig): AxiosPromise<UsersResponse> {
            return localVarFp.getStudentUsers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the teacher users for a student user
         * @param {UsersApiGetTeachersForUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachersForUser(requestParameters: UsersApiGetTeachersForUserRequest, options?: AxiosRequestConfig): AxiosPromise<UsersResponse> {
            return localVarFp.getTeachersForUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a specific user
         * @param {UsersApiGetUserByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById(requestParameters: UsersApiGetUserByIdRequest, options?: AxiosRequestConfig): AxiosPromise<UserResponse> {
            return localVarFp.getUserById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getDistrict operation in UsersApi.
 * @export
 * @interface UsersApiGetDistrictRequest
 */
export type UsersApiGetDistrictRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetDistrict
    */
    readonly id: string
    
}

/**
 * Request parameters for getList operation in UsersApi.
 * @export
 * @interface UsersApiGetListRequest
 */
export type UsersApiGetListRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof UsersApiGetList
    */
    readonly limit?: number
    
    /**
    * 
    * @type {'contact' | 'district_admin' | 'staff' | 'student' | 'teacher'}
    * @memberof UsersApiGetList
    */
    readonly role?: 'contact' | 'district_admin' | 'staff' | 'student' | 'teacher'
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetList
    */
    readonly startingAfter?: string
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetList
    */
    readonly endingBefore?: string
    
    /**
    * 
    * @type {'' | 'true' | 'false' | 'undefined'}
    * @memberof UsersApiGetList
    */
    readonly count?: '' | 'true' | 'false' | 'undefined'
    
}

/**
 * Request parameters for getMyContacts operation in UsersApi.
 * @export
 * @interface UsersApiGetMyContactsRequest
 */
export type UsersApiGetMyContactsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetMyContacts
    */
    readonly id: string
    
    /**
    * 
    * @type {number}
    * @memberof UsersApiGetMyContacts
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetMyContacts
    */
    readonly startingAfter?: string
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetMyContacts
    */
    readonly endingBefore?: string
    
}

/**
 * Request parameters for getResources operation in UsersApi.
 * @export
 * @interface UsersApiGetResourcesRequest
 */
export type UsersApiGetResourcesRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetResources
    */
    readonly id: string
    
    /**
    * 
    * @type {number}
    * @memberof UsersApiGetResources
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetResources
    */
    readonly startingAfter?: string
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetResources
    */
    readonly endingBefore?: string
    
}

/**
 * Request parameters for getSchools operation in UsersApi.
 * @export
 * @interface UsersApiGetSchoolsRequest
 */
export type UsersApiGetSchoolsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetSchools
    */
    readonly id: string
    
    /**
    * 
    * @type {'' | 'true'}
    * @memberof UsersApiGetSchools
    */
    readonly primary?: '' | 'true'
    
    /**
    * 
    * @type {number}
    * @memberof UsersApiGetSchools
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetSchools
    */
    readonly startingAfter?: string
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetSchools
    */
    readonly endingBefore?: string
    
}

/**
 * Request parameters for getSections operation in UsersApi.
 * @export
 * @interface UsersApiGetSectionsRequest
 */
export type UsersApiGetSectionsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetSections
    */
    readonly id: string
    
    /**
    * 
    * @type {number}
    * @memberof UsersApiGetSections
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetSections
    */
    readonly startingAfter?: string
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetSections
    */
    readonly endingBefore?: string
    
}

/**
 * Request parameters for getStudentUsers operation in UsersApi.
 * @export
 * @interface UsersApiGetStudentUsersRequest
 */
export type UsersApiGetStudentUsersRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetStudentUsers
    */
    readonly id: string
    
    /**
    * 
    * @type {number}
    * @memberof UsersApiGetStudentUsers
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetStudentUsers
    */
    readonly startingAfter?: string
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetStudentUsers
    */
    readonly endingBefore?: string
    
}

/**
 * Request parameters for getTeachersForUser operation in UsersApi.
 * @export
 * @interface UsersApiGetTeachersForUserRequest
 */
export type UsersApiGetTeachersForUserRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetTeachersForUser
    */
    readonly id: string
    
    /**
    * 
    * @type {number}
    * @memberof UsersApiGetTeachersForUser
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetTeachersForUser
    */
    readonly startingAfter?: string
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetTeachersForUser
    */
    readonly endingBefore?: string
    
}

/**
 * Request parameters for getUserById operation in UsersApi.
 * @export
 * @interface UsersApiGetUserByIdRequest
 */
export type UsersApiGetUserByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetUserById
    */
    readonly id: string
    
}

/**
 * UsersApiGenerated - object-oriented interface
 * @export
 * @class UsersApiGenerated
 * @extends {BaseAPI}
 */
export class UsersApiGenerated extends BaseAPI {
    /**
     * Returns the district for a user
     * @param {UsersApiGetDistrictRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public getDistrict(requestParameters: UsersApiGetDistrictRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getDistrict(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of contact, district admin, staff, student, and/or teacher users
     * @param {UsersApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public getList(requestParameters: UsersApiGetListRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the contact users for a student user
     * @param {UsersApiGetMyContactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public getMyContacts(requestParameters: UsersApiGetMyContactsRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getMyContacts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the resources for a user
     * @param {UsersApiGetResourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public getResources(requestParameters: UsersApiGetResourcesRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getResources(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the schools for a user
     * @param {UsersApiGetSchoolsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public getSchools(requestParameters: UsersApiGetSchoolsRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getSchools(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the sections for a user
     * @param {UsersApiGetSectionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public getSections(requestParameters: UsersApiGetSectionsRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getSections(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the student users for a teacher or contact user
     * @param {UsersApiGetStudentUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public getStudentUsers(requestParameters: UsersApiGetStudentUsersRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getStudentUsers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the teacher users for a student user
     * @param {UsersApiGetTeachersForUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public getTeachersForUser(requestParameters: UsersApiGetTeachersForUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getTeachersForUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a specific user
     * @param {UsersApiGetUserByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public getUserById(requestParameters: UsersApiGetUserByIdRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUserById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
