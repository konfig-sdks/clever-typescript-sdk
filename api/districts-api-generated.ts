/* tslint:disable */
/* eslint-disable */
/*
Data API

Serves the Clever Data API

The version of the OpenAPI document: 3.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DistrictResponse } from '../models';
// @ts-ignore
import { DistrictsResponse } from '../models';
// @ts-ignore
import { NotFound } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DistrictsApi - axios parameter creator
 * @export
 */
export const DistrictsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a list of districts. In practice this will only return the one district associated with the bearer token
         * @param {'' | 'true' | 'false' | 'undefined'} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (count?: '' | 'true' | 'false' | 'undefined', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/districts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", [], configuration)
            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/districts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a specific district
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificDistrict: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSpecificDistrict', 'id', id)
            const localVarPath = `/districts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/districts/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DistrictsApi - functional programming interface
 * @export
 */
export const DistrictsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DistrictsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a list of districts. In practice this will only return the one district associated with the bearer token
         * @param {DistrictsApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(requestParameters: DistrictsApiGetListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DistrictsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(requestParameters.count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a specific district
         * @param {DistrictsApiGetSpecificDistrictRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificDistrict(requestParameters: DistrictsApiGetSpecificDistrictRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DistrictResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificDistrict(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DistrictsApi - factory interface
 * @export
 */
export const DistrictsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DistrictsApiFp(configuration)
    return {
        /**
         * Returns a list of districts. In practice this will only return the one district associated with the bearer token
         * @param {DistrictsApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: DistrictsApiGetListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<DistrictsResponse> {
            return localVarFp.getList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a specific district
         * @param {DistrictsApiGetSpecificDistrictRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificDistrict(requestParameters: DistrictsApiGetSpecificDistrictRequest, options?: AxiosRequestConfig): AxiosPromise<DistrictResponse> {
            return localVarFp.getSpecificDistrict(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getList operation in DistrictsApi.
 * @export
 * @interface DistrictsApiGetListRequest
 */
export type DistrictsApiGetListRequest = {
    
    /**
    * 
    * @type {'' | 'true' | 'false' | 'undefined'}
    * @memberof DistrictsApiGetList
    */
    readonly count?: '' | 'true' | 'false' | 'undefined'
    
}

/**
 * Request parameters for getSpecificDistrict operation in DistrictsApi.
 * @export
 * @interface DistrictsApiGetSpecificDistrictRequest
 */
export type DistrictsApiGetSpecificDistrictRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DistrictsApiGetSpecificDistrict
    */
    readonly id: string
    
}

/**
 * DistrictsApiGenerated - object-oriented interface
 * @export
 * @class DistrictsApiGenerated
 * @extends {BaseAPI}
 */
export class DistrictsApiGenerated extends BaseAPI {
    /**
     * Returns a list of districts. In practice this will only return the one district associated with the bearer token
     * @param {DistrictsApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistrictsApiGenerated
     */
    public getList(requestParameters: DistrictsApiGetListRequest = {}, options?: AxiosRequestConfig) {
        return DistrictsApiFp(this.configuration).getList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a specific district
     * @param {DistrictsApiGetSpecificDistrictRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistrictsApiGenerated
     */
    public getSpecificDistrict(requestParameters: DistrictsApiGetSpecificDistrictRequest, options?: AxiosRequestConfig) {
        return DistrictsApiFp(this.configuration).getSpecificDistrict(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
