/* tslint:disable */
/* eslint-disable */
/*
Data API

Serves the Clever Data API

The version of the OpenAPI document: 3.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CoursesResponse } from '../models';
// @ts-ignore
import { DistrictResponse } from '../models';
// @ts-ignore
import { NotFound } from '../models';
// @ts-ignore
import { SchoolResponse } from '../models';
// @ts-ignore
import { SchoolsResponse } from '../models';
// @ts-ignore
import { SectionsResponse } from '../models';
// @ts-ignore
import { TermsResponse } from '../models';
// @ts-ignore
import { UsersResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SchoolsApi - axios parameter creator
 * @export
 */
export const SchoolsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the courses for a school
         * @param {string} id 
         * @param {number} [limit] 
         * @param {string} [startingAfter] 
         * @param {string} [endingBefore] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourses: async (id: string, limit?: number, startingAfter?: string, endingBefore?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCourses', 'id', id)
            const localVarPath = `/schools/{id}/courses`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", [], configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schools/{id}/courses',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the district for a school
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistrict: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDistrict', 'id', id)
            const localVarPath = `/schools/{id}/district`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schools/{id}/district',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the sections for a school
         * @param {string} id 
         * @param {number} [limit] 
         * @param {string} [startingAfter] 
         * @param {string} [endingBefore] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSections: async (id: string, limit?: number, startingAfter?: string, endingBefore?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSections', 'id', id)
            const localVarPath = `/schools/{id}/sections`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", [], configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schools/{id}/sections',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a specific school
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificSchool: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSpecificSchool', 'id', id)
            const localVarPath = `/schools/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schools/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the terms for a school
         * @param {string} id 
         * @param {number} [limit] 
         * @param {string} [startingAfter] 
         * @param {string} [endingBefore] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTerms: async (id: string, limit?: number, startingAfter?: string, endingBefore?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTerms', 'id', id)
            const localVarPath = `/schools/{id}/terms`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", [], configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schools/{id}/terms',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the staff, student, and/or teacher users for a school
         * @param {string} id 
         * @param {'staff' | 'student' | 'teacher'} [role] 
         * @param {'' | 'true'} [primary] 
         * @param {number} [limit] 
         * @param {string} [startingAfter] 
         * @param {string} [endingBefore] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (id: string, role?: 'staff' | 'student' | 'teacher', primary?: '' | 'true', limit?: number, startingAfter?: string, endingBefore?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUsers', 'id', id)
            const localVarPath = `/schools/{id}/users`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", [], configuration)
            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }

            if (primary !== undefined) {
                localVarQueryParameter['primary'] = primary;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schools/{id}/users',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of schools
         * @param {number} [limit] 
         * @param {string} [startingAfter] 
         * @param {string} [endingBefore] 
         * @param {'' | 'true' | 'false' | 'undefined'} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (limit?: number, startingAfter?: string, endingBefore?: string, count?: '' | 'true' | 'false' | 'undefined', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/schools`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", [], configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schools',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SchoolsApi - functional programming interface
 * @export
 */
export const SchoolsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SchoolsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the courses for a school
         * @param {SchoolsApiGetCoursesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourses(requestParameters: SchoolsApiGetCoursesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoursesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourses(requestParameters.id, requestParameters.limit, requestParameters.startingAfter, requestParameters.endingBefore, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the district for a school
         * @param {SchoolsApiGetDistrictRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDistrict(requestParameters: SchoolsApiGetDistrictRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DistrictResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDistrict(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the sections for a school
         * @param {SchoolsApiGetSectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSections(requestParameters: SchoolsApiGetSectionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SectionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSections(requestParameters.id, requestParameters.limit, requestParameters.startingAfter, requestParameters.endingBefore, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a specific school
         * @param {SchoolsApiGetSpecificSchoolRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificSchool(requestParameters: SchoolsApiGetSpecificSchoolRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchoolResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificSchool(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the terms for a school
         * @param {SchoolsApiGetTermsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTerms(requestParameters: SchoolsApiGetTermsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTerms(requestParameters.id, requestParameters.limit, requestParameters.startingAfter, requestParameters.endingBefore, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the staff, student, and/or teacher users for a school
         * @param {SchoolsApiGetUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(requestParameters: SchoolsApiGetUsersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(requestParameters.id, requestParameters.role, requestParameters.primary, requestParameters.limit, requestParameters.startingAfter, requestParameters.endingBefore, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of schools
         * @param {SchoolsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: SchoolsApiListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchoolsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.limit, requestParameters.startingAfter, requestParameters.endingBefore, requestParameters.count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SchoolsApi - factory interface
 * @export
 */
export const SchoolsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SchoolsApiFp(configuration)
    return {
        /**
         * Returns the courses for a school
         * @param {SchoolsApiGetCoursesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourses(requestParameters: SchoolsApiGetCoursesRequest, options?: AxiosRequestConfig): AxiosPromise<CoursesResponse> {
            return localVarFp.getCourses(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the district for a school
         * @param {SchoolsApiGetDistrictRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistrict(requestParameters: SchoolsApiGetDistrictRequest, options?: AxiosRequestConfig): AxiosPromise<DistrictResponse> {
            return localVarFp.getDistrict(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the sections for a school
         * @param {SchoolsApiGetSectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSections(requestParameters: SchoolsApiGetSectionsRequest, options?: AxiosRequestConfig): AxiosPromise<SectionsResponse> {
            return localVarFp.getSections(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a specific school
         * @param {SchoolsApiGetSpecificSchoolRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificSchool(requestParameters: SchoolsApiGetSpecificSchoolRequest, options?: AxiosRequestConfig): AxiosPromise<SchoolResponse> {
            return localVarFp.getSpecificSchool(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the terms for a school
         * @param {SchoolsApiGetTermsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTerms(requestParameters: SchoolsApiGetTermsRequest, options?: AxiosRequestConfig): AxiosPromise<TermsResponse> {
            return localVarFp.getTerms(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the staff, student, and/or teacher users for a school
         * @param {SchoolsApiGetUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(requestParameters: SchoolsApiGetUsersRequest, options?: AxiosRequestConfig): AxiosPromise<UsersResponse> {
            return localVarFp.getUsers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of schools
         * @param {SchoolsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: SchoolsApiListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<SchoolsResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCourses operation in SchoolsApi.
 * @export
 * @interface SchoolsApiGetCoursesRequest
 */
export type SchoolsApiGetCoursesRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SchoolsApiGetCourses
    */
    readonly id: string
    
    /**
    * 
    * @type {number}
    * @memberof SchoolsApiGetCourses
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof SchoolsApiGetCourses
    */
    readonly startingAfter?: string
    
    /**
    * 
    * @type {string}
    * @memberof SchoolsApiGetCourses
    */
    readonly endingBefore?: string
    
}

/**
 * Request parameters for getDistrict operation in SchoolsApi.
 * @export
 * @interface SchoolsApiGetDistrictRequest
 */
export type SchoolsApiGetDistrictRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SchoolsApiGetDistrict
    */
    readonly id: string
    
}

/**
 * Request parameters for getSections operation in SchoolsApi.
 * @export
 * @interface SchoolsApiGetSectionsRequest
 */
export type SchoolsApiGetSectionsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SchoolsApiGetSections
    */
    readonly id: string
    
    /**
    * 
    * @type {number}
    * @memberof SchoolsApiGetSections
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof SchoolsApiGetSections
    */
    readonly startingAfter?: string
    
    /**
    * 
    * @type {string}
    * @memberof SchoolsApiGetSections
    */
    readonly endingBefore?: string
    
}

/**
 * Request parameters for getSpecificSchool operation in SchoolsApi.
 * @export
 * @interface SchoolsApiGetSpecificSchoolRequest
 */
export type SchoolsApiGetSpecificSchoolRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SchoolsApiGetSpecificSchool
    */
    readonly id: string
    
}

/**
 * Request parameters for getTerms operation in SchoolsApi.
 * @export
 * @interface SchoolsApiGetTermsRequest
 */
export type SchoolsApiGetTermsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SchoolsApiGetTerms
    */
    readonly id: string
    
    /**
    * 
    * @type {number}
    * @memberof SchoolsApiGetTerms
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof SchoolsApiGetTerms
    */
    readonly startingAfter?: string
    
    /**
    * 
    * @type {string}
    * @memberof SchoolsApiGetTerms
    */
    readonly endingBefore?: string
    
}

/**
 * Request parameters for getUsers operation in SchoolsApi.
 * @export
 * @interface SchoolsApiGetUsersRequest
 */
export type SchoolsApiGetUsersRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SchoolsApiGetUsers
    */
    readonly id: string
    
    /**
    * 
    * @type {'staff' | 'student' | 'teacher'}
    * @memberof SchoolsApiGetUsers
    */
    readonly role?: 'staff' | 'student' | 'teacher'
    
    /**
    * 
    * @type {'' | 'true'}
    * @memberof SchoolsApiGetUsers
    */
    readonly primary?: '' | 'true'
    
    /**
    * 
    * @type {number}
    * @memberof SchoolsApiGetUsers
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof SchoolsApiGetUsers
    */
    readonly startingAfter?: string
    
    /**
    * 
    * @type {string}
    * @memberof SchoolsApiGetUsers
    */
    readonly endingBefore?: string
    
}

/**
 * Request parameters for list operation in SchoolsApi.
 * @export
 * @interface SchoolsApiListRequest
 */
export type SchoolsApiListRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof SchoolsApiList
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof SchoolsApiList
    */
    readonly startingAfter?: string
    
    /**
    * 
    * @type {string}
    * @memberof SchoolsApiList
    */
    readonly endingBefore?: string
    
    /**
    * 
    * @type {'' | 'true' | 'false' | 'undefined'}
    * @memberof SchoolsApiList
    */
    readonly count?: '' | 'true' | 'false' | 'undefined'
    
}

/**
 * SchoolsApiGenerated - object-oriented interface
 * @export
 * @class SchoolsApiGenerated
 * @extends {BaseAPI}
 */
export class SchoolsApiGenerated extends BaseAPI {
    /**
     * Returns the courses for a school
     * @param {SchoolsApiGetCoursesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolsApiGenerated
     */
    public getCourses(requestParameters: SchoolsApiGetCoursesRequest, options?: AxiosRequestConfig) {
        return SchoolsApiFp(this.configuration).getCourses(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the district for a school
     * @param {SchoolsApiGetDistrictRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolsApiGenerated
     */
    public getDistrict(requestParameters: SchoolsApiGetDistrictRequest, options?: AxiosRequestConfig) {
        return SchoolsApiFp(this.configuration).getDistrict(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the sections for a school
     * @param {SchoolsApiGetSectionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolsApiGenerated
     */
    public getSections(requestParameters: SchoolsApiGetSectionsRequest, options?: AxiosRequestConfig) {
        return SchoolsApiFp(this.configuration).getSections(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a specific school
     * @param {SchoolsApiGetSpecificSchoolRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolsApiGenerated
     */
    public getSpecificSchool(requestParameters: SchoolsApiGetSpecificSchoolRequest, options?: AxiosRequestConfig) {
        return SchoolsApiFp(this.configuration).getSpecificSchool(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the terms for a school
     * @param {SchoolsApiGetTermsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolsApiGenerated
     */
    public getTerms(requestParameters: SchoolsApiGetTermsRequest, options?: AxiosRequestConfig) {
        return SchoolsApiFp(this.configuration).getTerms(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the staff, student, and/or teacher users for a school
     * @param {SchoolsApiGetUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolsApiGenerated
     */
    public getUsers(requestParameters: SchoolsApiGetUsersRequest, options?: AxiosRequestConfig) {
        return SchoolsApiFp(this.configuration).getUsers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of schools
     * @param {SchoolsApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolsApiGenerated
     */
    public list(requestParameters: SchoolsApiListRequest = {}, options?: AxiosRequestConfig) {
        return SchoolsApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
