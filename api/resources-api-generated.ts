/* tslint:disable */
/* eslint-disable */
/*
Data API

Serves the Clever Data API

The version of the OpenAPI document: 3.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CoursesResponse } from '../models';
// @ts-ignore
import { NotFound } from '../models';
// @ts-ignore
import { ResourceResponse } from '../models';
// @ts-ignore
import { ResourcesResponse } from '../models';
// @ts-ignore
import { SectionsResponse } from '../models';
// @ts-ignore
import { UsersResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ResourcesApi - axios parameter creator
 * @export
 */
export const ResourcesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a specific resource
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/resources/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/resources/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the courses for a resource
         * @param {string} id 
         * @param {number} [limit] 
         * @param {string} [startingAfter] 
         * @param {string} [endingBefore] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourses: async (id: string, limit?: number, startingAfter?: string, endingBefore?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCourses', 'id', id)
            const localVarPath = `/resources/{id}/courses`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", [], configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/resources/{id}/courses',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of resources
         * @param {number} [limit] 
         * @param {string} [startingAfter] 
         * @param {string} [endingBefore] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (limit?: number, startingAfter?: string, endingBefore?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/resources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", [], configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/resources',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the student and/or teacher users for a resource
         * @param {string} id 
         * @param {'student' | 'teacher'} [role] 
         * @param {number} [limit] 
         * @param {string} [startingAfter] 
         * @param {string} [endingBefore] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (id: string, role?: 'student' | 'teacher', limit?: number, startingAfter?: string, endingBefore?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUsers', 'id', id)
            const localVarPath = `/resources/{id}/users`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", [], configuration)
            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/resources/{id}/users',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the sections for a resource
         * @param {string} id 
         * @param {number} [limit] 
         * @param {string} [startingAfter] 
         * @param {string} [endingBefore] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSections: async (id: string, limit?: number, startingAfter?: string, endingBefore?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSections', 'id', id)
            const localVarPath = `/resources/{id}/sections`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", [], configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/resources/{id}/sections',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResourcesApi - functional programming interface
 * @export
 */
export const ResourcesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ResourcesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a specific resource
         * @param {ResourcesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: ResourcesApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the courses for a resource
         * @param {ResourcesApiGetCoursesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourses(requestParameters: ResourcesApiGetCoursesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoursesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourses(requestParameters.id, requestParameters.limit, requestParameters.startingAfter, requestParameters.endingBefore, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of resources
         * @param {ResourcesApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(requestParameters: ResourcesApiGetListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourcesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(requestParameters.limit, requestParameters.startingAfter, requestParameters.endingBefore, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the student and/or teacher users for a resource
         * @param {ResourcesApiGetUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(requestParameters: ResourcesApiGetUsersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(requestParameters.id, requestParameters.role, requestParameters.limit, requestParameters.startingAfter, requestParameters.endingBefore, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the sections for a resource
         * @param {ResourcesApiListSectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSections(requestParameters: ResourcesApiListSectionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SectionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSections(requestParameters.id, requestParameters.limit, requestParameters.startingAfter, requestParameters.endingBefore, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ResourcesApi - factory interface
 * @export
 */
export const ResourcesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ResourcesApiFp(configuration)
    return {
        /**
         * Returns a specific resource
         * @param {ResourcesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: ResourcesApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ResourceResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the courses for a resource
         * @param {ResourcesApiGetCoursesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourses(requestParameters: ResourcesApiGetCoursesRequest, options?: AxiosRequestConfig): AxiosPromise<CoursesResponse> {
            return localVarFp.getCourses(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of resources
         * @param {ResourcesApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: ResourcesApiGetListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ResourcesResponse> {
            return localVarFp.getList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the student and/or teacher users for a resource
         * @param {ResourcesApiGetUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(requestParameters: ResourcesApiGetUsersRequest, options?: AxiosRequestConfig): AxiosPromise<UsersResponse> {
            return localVarFp.getUsers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the sections for a resource
         * @param {ResourcesApiListSectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSections(requestParameters: ResourcesApiListSectionsRequest, options?: AxiosRequestConfig): AxiosPromise<SectionsResponse> {
            return localVarFp.listSections(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getById operation in ResourcesApi.
 * @export
 * @interface ResourcesApiGetByIdRequest
 */
export type ResourcesApiGetByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ResourcesApiGetById
    */
    readonly id: string
    
}

/**
 * Request parameters for getCourses operation in ResourcesApi.
 * @export
 * @interface ResourcesApiGetCoursesRequest
 */
export type ResourcesApiGetCoursesRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ResourcesApiGetCourses
    */
    readonly id: string
    
    /**
    * 
    * @type {number}
    * @memberof ResourcesApiGetCourses
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof ResourcesApiGetCourses
    */
    readonly startingAfter?: string
    
    /**
    * 
    * @type {string}
    * @memberof ResourcesApiGetCourses
    */
    readonly endingBefore?: string
    
}

/**
 * Request parameters for getList operation in ResourcesApi.
 * @export
 * @interface ResourcesApiGetListRequest
 */
export type ResourcesApiGetListRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof ResourcesApiGetList
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof ResourcesApiGetList
    */
    readonly startingAfter?: string
    
    /**
    * 
    * @type {string}
    * @memberof ResourcesApiGetList
    */
    readonly endingBefore?: string
    
}

/**
 * Request parameters for getUsers operation in ResourcesApi.
 * @export
 * @interface ResourcesApiGetUsersRequest
 */
export type ResourcesApiGetUsersRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ResourcesApiGetUsers
    */
    readonly id: string
    
    /**
    * 
    * @type {'student' | 'teacher'}
    * @memberof ResourcesApiGetUsers
    */
    readonly role?: 'student' | 'teacher'
    
    /**
    * 
    * @type {number}
    * @memberof ResourcesApiGetUsers
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof ResourcesApiGetUsers
    */
    readonly startingAfter?: string
    
    /**
    * 
    * @type {string}
    * @memberof ResourcesApiGetUsers
    */
    readonly endingBefore?: string
    
}

/**
 * Request parameters for listSections operation in ResourcesApi.
 * @export
 * @interface ResourcesApiListSectionsRequest
 */
export type ResourcesApiListSectionsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ResourcesApiListSections
    */
    readonly id: string
    
    /**
    * 
    * @type {number}
    * @memberof ResourcesApiListSections
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof ResourcesApiListSections
    */
    readonly startingAfter?: string
    
    /**
    * 
    * @type {string}
    * @memberof ResourcesApiListSections
    */
    readonly endingBefore?: string
    
}

/**
 * ResourcesApiGenerated - object-oriented interface
 * @export
 * @class ResourcesApiGenerated
 * @extends {BaseAPI}
 */
export class ResourcesApiGenerated extends BaseAPI {
    /**
     * Returns a specific resource
     * @param {ResourcesApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApiGenerated
     */
    public getById(requestParameters: ResourcesApiGetByIdRequest, options?: AxiosRequestConfig) {
        return ResourcesApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the courses for a resource
     * @param {ResourcesApiGetCoursesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApiGenerated
     */
    public getCourses(requestParameters: ResourcesApiGetCoursesRequest, options?: AxiosRequestConfig) {
        return ResourcesApiFp(this.configuration).getCourses(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of resources
     * @param {ResourcesApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApiGenerated
     */
    public getList(requestParameters: ResourcesApiGetListRequest = {}, options?: AxiosRequestConfig) {
        return ResourcesApiFp(this.configuration).getList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the student and/or teacher users for a resource
     * @param {ResourcesApiGetUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApiGenerated
     */
    public getUsers(requestParameters: ResourcesApiGetUsersRequest, options?: AxiosRequestConfig) {
        return ResourcesApiFp(this.configuration).getUsers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the sections for a resource
     * @param {ResourcesApiListSectionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApiGenerated
     */
    public listSections(requestParameters: ResourcesApiListSectionsRequest, options?: AxiosRequestConfig) {
        return ResourcesApiFp(this.configuration).listSections(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
